#include <Renderer/image_shader.h>
#include <Renderer/ImageLoader.h>
#include <iostream>
#include <Renderer/renderer.h>
#include "stb_image.h"

#include <glm/gtc/matrix_transform.hpp>
#include "glm/ext.hpp"
#include "glm/gtx/string_cast.hpp"

#include "gl_utils.h"
#include "gl_core.h"
#include <map>


using namespace std;

static std::map<std::string, int> texture_map;

ImageShader::ImageShader(std::string path) {
    this->texture = loadImage(path);
}

void ImageShader::activate() {
    if(!mInit) {
        init();
    } 

    glUseProgram(shaderProgram);

    glActiveTexture(GL_TEXTURE0);
    glUniform1i(glGetUniformLocation(shaderProgram, "image"), 0);
    glBindTexture(GL_TEXTURE_2D, texture);

}

void ImageShader::init(){
    mInit = true;
    const char *vertexShaderSource = "#version 330 core\n"
        "layout (location = 0) in vec3 aPos;\n"
        "layout (location = 1) in vec3 aNormal;\n"
        "layout (location = 2) in vec2 aUv;\n"
        "uniform mat4 model;"
        "uniform mat4 view;"
        "uniform mat4 projection;"
        //"uniform mat4 uv_transform;"
        "out vec2 vUv;"
        "void main()\n"
        "{\n"
        "   gl_Position = projection * view * model * vec4(aPos.x, aPos.y, aPos.z, 1.0);\n"
        //"   vUv = (uv_transform * vec4(aUv, 0.0, 1.0)).xy;\n"
        "   vUv = aUv;\n"
        "}\0";
    const char *fragmentShaderSource = "#version 330 core\n"
        "out vec4 FragColor;\n"
        "in vec2 vUv;\n"
        "uniform vec4 color;"
        "uniform sampler2D image;\n"

        "void main()\n"
        "{\n"
        "   FragColor = texture(image, vUv);\n"
        //"   FragColor = vec4(vUv.xy, 1.0 , 1.0);\n"
        "}\n\0";

    shaderProgram = buildShaderProgram(vertexShaderSource, fragmentShaderSource);
}
